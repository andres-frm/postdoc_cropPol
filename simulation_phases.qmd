---
title: "Blueberry pollination: phases of the simulation study"
author: "Ramírez-Mejía, A. F."
format: 
  html:
    theme: 
      light: journal
      dark: [journal, theme-dark.scss]
    toc: true
    toc-depth: 10
    toc-expand: 10
    toc-title: "Tabla de contenido"
    toc-location: left
    embed-resources: true
number-sections: false
number-depth: 10
editor: visual
date-format: full 
date-modified: now
mainfont: Times New Roman
code-fold: false
code-overflow: scroll
code-line-numbers: true
code-copy: true
---

```{r, echo=FALSE}
#knitr::opts_chunk$set(echo = TRUE)
```

```{r}
#| warning: false
#| message: false
#| results: hide

pks <- c('ggdag', 'dagitty', 'ggplot2', 'tibble')

sapply(pks, library, character.only = T)

```


# 1. Research problem

Farmers of pollinator-dependent crops routinely implement 
precise protocols for applying fertilizers, herbicides or pesticides, managing 
irrigation system or planing pruning. In contrast, despite animal pollination being 
crucial for plant reproduction and flowers setting fruit, the management tend to be 
based on rule of thumb guides (e.g. beehive densities) that do not consider contingencies 
regarding the spatial context, mating system of the crop and pollination effectiveness of 
each species. Such fuzziness for managing pollination service increases the uncertainty 
about the actual contribution of pollinators to crop productivity. That is, traditional 
pollination management do not provide answers to: *how many bees (beehives) do a farmer need
to reach optimal pollination levels and maximize the production?*


Our main goal is developing a stochastic simulation model based on empirical evidence to recreate 
pollination process in blueberry crops considering: current levels of pollination, 
beehive density, spatial arrangement of hives, honeybee abundance and visitation rate, 
flowers density, pollen deposition in flowers and fruit development. 

# 2. Solution techniques

We will use, mostly, empirical data collected in blueberry crops from Argentina to fit 
Bayesian models and use posterior distributions for the parametrization of the simulation
model. We will also use literature information for representing, for instance, beehive
population. All programming and simulation process will be conducted in `R 4.3.1`.

# 3. System and model conceptualization

Our study system will be the blueberry crop. We use this species sin it is highly dependent on 
animal pollination to guarantee that flowers set fruit, and because it constitute 
and ideal system to assess the cascading process affecting the pollination service.

```{r, fig.cap='Flow chart illustrating the cascading proces affecting yield of blueberry crops', fig.align='center', echo=FALSE}

sim_mod <- 
  dagify(Y ~ FW + nF, 
         nF ~ FloD + Pfs, 
         FW ~ PollD,
         Pfs ~ nVis,
         PollD ~ nVis + wild,
         nVis ~ apis + percF, 
         apis ~ propF + apisN + timeF,
         BHd ~ BHs,
         propF ~ BHs + BHd,
         exposure = 'BHd', 
         outcome = 'Y')

coordinates(sim_mod) <- 
  list(
    y = c(BHs = 1, propF = 0, BHd = -1, apis = 0, 
          apisN = 1, timeF = -1,  nVis = 0, PollD = -1, wild = -2, Pfs = 1,
          nF = 1, FW = -1, FloD = 2, Y = 0, percF = 1), 
    
    x = c(BHs = 1, propF = 2, BHd = 1, apis = 3, 
          apisN = 3,  timeF = 3, nVis = 4, PollD = 5, wild = 5, Pfs = 5, 
          nF = 6, FW = 6, FloD = 6, Y = 7, percF = 4)
  )

labels <- tibble(lab = c('Pre-pollination', 'Pollination', 'Production'), 
                 x = c(2, 4.5, 6.5), 
                 y = rep(2.75, 3))

ggdag(sim_mod) +
  geom_rect(aes(xmin = 0.5, xmax = 3.5, ymin = -2.5, ymax = 2.5), 
            fill = 'tan1', alpha = 0.01) +
  geom_rect(aes(xmin = 3.5, xmax = 5.5, ymin = -2.5, ymax = 2.5), 
            fill = 'lightpink', alpha = 0.01) +
  geom_rect(aes(xmin = 5.5, xmax = 7.5, ymin = -2.5, ymax = 2.5), 
            fill = 'blue4', alpha = 0.01) +
  annotate(geom = 'text', x = labels$x, y = labels$y, label = labels$lab) +
  geom_dag_node(color = 'lightblue') +
  geom_dag_text(color = 'black') +
  theme_classic() +
  theme(axis.line = element_blank(), 
        axis.text = element_blank(), 
        axis.ticks = element_blank(), 
        axis.title = element_blank())

```

:::{}

-   `BHs`: beehive strength (number of foraging individuals per hive).
-   `BHd`: beehive density (number of hives per ha).
-   `propF`: proportion of foraging bees per hive.
-   `apis`: Honeybee total abundance.
-   `timeF`: daily time invested.
-   `apisN`: Feral honeybees.
-   `nVis`: Total visits to blueberry flowers.
-   `percF`: Bloom percentage.
-   `Pfs`: Probability of flowers setting fruit.
-   `PollD`: Pollen deposition (pollen grains deposited after N visits).
-   `wild`: Wild pollinators abundance.
-   `nF`: number of flowers per bush (depends on flowering percentage).
-   `FloD`: number of flowers per ha (depends on flowering percentage).
-   `Y`: yield ($kg~ha^{-1}$), results from the sum of production per plant.
-   `FW`: Fruit weight (g) predicted from pollen deposition.

:::

The variables can change depending on the source and way we are planing to estimate the 
parameters or how the simulations will be programmed. Those variables (or parameters) can be 
classified as *prior estimator*, *posterior estimator* and *single-point estimator*. 
By *posterior estimator* I mean a random variable whose values comes from a prior 
probability distribution parametrized using literature data. *Posterior estimator* denotes 
a random variable (or parameter in deterministic functions) whose values were estimated 
through Bayesian models fitted to empirical data. Finally, *single-point estimator* are 
fixed values for certain parameters in the simulations.

**Prior estimators**: 

:::{}

*   `BHs`. (e.g. $Apis~population^{hive} \sim poisson(\lambda)$).

*   `propF`. $proportion~foragers_{hive~i} \sim Beta(\tau_1, \tau_2)$

*   `timeF`. Fraction of the day invested in foraging trips. 
                        
*   `apis`. It is the additive result of `BHd` and `apisN`.
                        
*   `nVis`. Part of this estimation depends on $visits^{-min} \sim poisson(\lambda)$.

:::


**Posterior estimator**: 

:::{}
*   `Pfs`. Estimated with data from [Kendall et all. 2020](https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/1365-2664.13751)
                        
*   `PollD`. Estimated value from deterministic function (whose parameters are posteriors).
                        
*   `FW`. We will use $\mu_{fruit~size} = \alpha + \beta_{pollen^2} +\beta_{pollen}$, then we will fit other model to estimate the slope of the correlation *size ~ weight*.

*   `nF`. Depending on the simulations programming, it can be a *single-point estimator*. Yet, it can also be represented as random values from $flowers^{-plant} \sim poisson(\lambda)$. The posteriot probability of parameter $\lambda$ would be estimated Bayesian approach and SURPASS data.

*   `wild`. Pollen deposition comes from deterministic function (whose parameters are posteriors).

:::

**Single-point estimator**:

:::{}
*   `BHd`. Different fixed values for each simulation.

*   `apisN`. Fixed starting value from [Ramirez-Mejia et al. (2023)](https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/1365-2664.14553) (only farms without beehives).

*   `wild`. Fixed abundance values from [Ramirez-Mejia et al. (2023)](https://www.sciencedirect.com/science/article/abs/pii/S0167880922003784) and [Ramirez-Mejia et al. (2023)](https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/1365-2664.14553).

*   `Y`. Number of plants per ha and flowers per plant

*   `FloD`. Number of plants per ha and flowers per plant

*   `percF`. Fixed value per simulation. 

:::


# 4. Model representation 

Let me explain how the initial data will be generated:

### `BHs` (beehive strength)

First we have to gather data on honeybees population size in hives of type X (e.g., literature and excerpt knowledge). Then define low medium or high quality hives depending on the minimum and maximum values for this type of hives, and asing a probability distribution that describe each level of quality. For instance, 
*[Geslin et al. (2017)](https://www.sciencedirect.com/science/article/abs/pii/S016788091730333X) work with
low (11000 individuals) and high quality hives (20000 individuals), at a rental price per colony of 20 US$
for high quality and 5 US$ for conventional. See also Figure 2 of [Chabert et al. (2021)](https://www.sciencedirect.com/science/article/pii/S1470160X20312553) to support those population sizes in *Langstroth* hives*; and [Grant et al (2021)](https://pubmed.ncbi.nlm.nih.gov/34395063/) for honeybee hives populations ranging between 
10300 to 30700.


$$
\begin{aligned}

Behive~strength_{quality~i} \sim NegBinom(\sigma, \mu)

\end{aligned}
$$

### `BHd` (beehive density)

Using reference values, *from 1 to 25 $hives^{-ha}$ ([Rolling and Garibaldi (2018)](https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/1365-2664.13355))*, an generate as much as random values of `BHs` as hives are simulated per ha.  
That is:


$$
\begin{aligned}

Total~honeybees = \sum hive_i \sim NegBinom(\mu = Behive~strength_{quality~i}, ~\sigma)

\end{aligned}
$$

Let see an example with code:

```{r}
hive_ha <- 25 # hives per ha

set.seed(1)
(beehive_strength <- rnbinom(hive_ha, size = 10, mu = 1e4)) # assume low quality hives
```


### `propF` (proportion of foraging individuals per hive)

The proportion of foraging bees within the hive depends on the hive size, resources demand 
and availability. Here we use literature data to represent it in form of probability 
distribution. *Here, we will follow [Seeley (1983)](https://www.jstor.org/stable/4599586) who 
found that between 22 to 40% of bees following waggle dances do foraging trees. So here, by the moment, I
will assume that around 40% of the colony is available to visiting flowers*. Let see it in code:

```{r}
set.seed(1)
prop_foragers <- rbeta(hive_ha, 5.5, 8)
```

### `timeF` (foraging time)

First of all, lets assume eight daily hours of pollination activity ([Garibaldi et al. 2020](https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/1365-2664.13574)). Then, I am 
will estimate the daily time invested during foraging trips by each honeybee using the values 
reported by [Eckert et al. (1994)](https://www.jstor.org/stable/4220612) (Table 3):



__*Hives with large populations (35000 ± 1700 workers)*__

:::{}

*Time of a single foraging trip (s)*

*   Nectar foragers =  1667.7 ± 126.4
*   Pollen foragers =  2683.9 ± 250.7



$$foraging~trip \sim Normal(\mu = \frac{1667.7+2686.9}{2}, ~\sigma = \frac{126.4+250.7}{2})$$

*Trip frequency (trips/90 min)*

*   Nectar foragers =  1.23 ± 0.06 (s)
*   Pollen foragers =  1.21 ± 0.15 (s)

$$trip~frequency \sim Normal(\mu = \frac{1.23+1.21}{2}, ~\sigma = \frac{0.06+0.15}{2})$$

:::


__*Hives with small populations (10000 ± 500 workers)*__

:::{}

*Time of a single foraging trip (s)*

*   Nectar foragers =  1210.8 ± 157.6
*   Pollen foragers =  1680.4 ± 212.6

$$foraging~trip \sim Normal(\mu = \frac{1210.8+1680.4}{2}, ~\sigma = \frac{157.6+212.6}{2})$$

*Trip frequency (trips/90 min)*

*   Nectar foragers =  1 ± 0.00 (s)
*   Pollen foragers =  1.41 ± 0.16 (s)

$$trip~frequency \sim Normal(\mu = \frac{1+1.4}{2}, ~\sigma = \frac{0+0.16}{2})$$

:::

lets explain how those values are integrated to estimate a probability distribution 
describing the available daily time that each bee in the colony will spend 
for actively visiting flowers:

```{r}

trip_frequency_LQ <- rnorm(2e3, 
                           mean(c(1, 1.4)), 
                           mean(c(0, 0.16))) # low quality hives

trip_span_LQ <- rnorm(2e3, 
                      mean(c(1210.8, 1680.4)), 
                      mean(c(157.6, 212.6))) # low quality hives

trips_bee_LQ <- trip_frequency_LQ * ((8*60)/90) # number of trips per day

foraging_time <- trip_span_LQ * trips_bee_LQ # foraging time in seconds

par(mfrow = c(2, 2))

plot(density(trip_frequency_LQ), main = '',
     xlab = 'Number of foraging trips (trips/90 min)')

plot(density(trip_span_LQ/60), main = '',
     xlab = 'Trip span (min)')

plot(density(trips_bee_LQ), main = '',
     xlab = 'Daily trip per bee (min)')

plot(density((foraging_time/60)/60), main = '',
     xlab = 'Daily foraging time per bee (h)')

par(mfrow = c(1, 1))

```

### `apis` (managed honeybees) and `apisN` (feral honeybees)

We can consider feral honeybees as a fraction of the total contributed by beehives. For instance:

```{r}

(feral_pop <- (quantile(1:sum(beehive_strength), 0.1))) # lest assume that feral honeybee population 
                                                        # is about a 10% of the managed population

```

and the populations of our 15 hives

```{r}
beehive_strength
```

But! Remember that not all the workers in a hive are actually able to forage. Therefore:

```{r}

set.seed(1)
foragers_bees <- round(beehive_strength * sample(prop_foragers, hive_ha))
foragers_bees
```

Now, we will use all data above to calculate the number of visits that each bee 
will make during the day.

### `nVis` (number of honeybee visits)

The number of visits depends on how many flowers can visit a honeybee per unit of time. To estimate this value, 
we can fit a model describing the time invested by each pollinator in a single floral visits (**chapter III of my PhD thesis**). We will use the model to simulate visit times (s) and add the values up to 1 min. Then we can estimate the number of flowers that a honeybee could visit during a single day if the bee does not rest or return to the hive. *Finally, we will use secondary data to estimate the percentage of daily activity that a bee invest foraging (we can use a beta distribution)*, and use it to estimate a more accurate value from the total possible visits. Lets see an example:

```{r}

time_visit <- rgamma(2e3, 
                     shape = (17^2)/7, 
                     rate = 17/7)

```

We will use this distribution to estimate the number of visits that each bee 
will make during the day. First, we will create a function to generate the random values that, later, will be used for simulating the total visits to the cop flowers

```{r}

N_foraging_trips <- 
  
  function(iter, # bees per hive 
           time_foragin, # effective time to forage during the day (in s)
           time_per_visit) { # posterior distribution of time spend per visit
    
    time_foragin <- sample(time_foragin, iter, T)
    
    t1 <- Sys.time()
    visits_bee <- 
      sapply(1:iter, FUN = 
               function(x) {
                 
                 time <- 0
                 vis <- 0
                 
                 while (time < time_foragin[[x]]) { 
                   # while the bee does not surpass their time 
                   # available for foraging
                   time <- time + sample(time_per_visit, 1) # visits of random time (s)
                   vis <- vis + 1
                 }
                 
                 vis
                 
               })
    message(paste('Execution time', Sys.time() - t1))
    
    return(visits_bee)
    
  }

t1 <- Sys.time()
visits_day <- N_foraging_trips(iter = 2e4, 
                               time_foragin = foraging_time, 
                               time_per_visit = time_visit)
Sys.time() - t1

```

Here, we have simulated the number of visits per visit during a single day. Now 
we have to simulate the plants, their flowers and we must define a flowering percentage
for the plot.

First, lets simulate 1 ha of blueberry (cultivar Emerald). I will follow the plantation densities used in Citromax farms in Tucumán. Then, I will replicate the simulated 
flowering visits to the crop if only one low-quality hive is located within the crop. 
*Here, we assume (i) 2 days as the maximum receptivity period of flowers,  
$flowers_{plant} \sim Normal(\mu=4000, ~ \sigma=500)$, and 
$flowering~percentage \sim beta(\tau_1=6, ~\tau_2=4)$ (~60%).*

```{r}
p_01ha <- round((1501* # plants of emerald per ha (2011 in Citromax)
                  1)/0.45)

plot(density(rnorm(1e3, 4e3, 500)), main = '', xlab = 'Flowers per blueberry bush') 

set.seed(1)
plants <- round(rnorm(p_01ha, 5e3, 500)) # plantas with random floral display

plot(density(rbeta(1e3, 6, 4)), 
     main = '', xlab = 'Flowering percentage per bush')

set.seed(1)
flowering_perc <- rbeta(p_01ha, 6, 4)

plants <- round(plants * flowering_perc) # adjust number of flowers according the
                                         # flowering percentage

plants <- lapply(plants, FUN = 
                   function(x) {
                     rep(0, x) # Plants with individual flowers
                   })

names(plants) <- paste('plant', 1:p_01ha, sep = '')
```

Now, we prepare the number of visits that each bee can conduct during the day

```{r}
foragers_visits <- lapply(foragers_bees, FUN = 
                            function(x) {
                              sample(visits_day, x, replace = T)
                            })

unlist(lapply(foragers_visits, sum)) # total floral visits from 
                                     # each hive in a single day
length(plants) # plants per ha
```

Lets simulate!

```{r, echo=TRUE, eval=FALSE}

t1 <- Sys.time()
plants <- 
  lapply(foragers_visits, FUN = 
           function(colmena) {
             
             set.seed(1)
             plants <- round(rnorm(p_01ha, 5e3, 500))
             
             plants <- round(plants * flowering_perc)
             
             plants <- lapply(plants, FUN = 
                                function(x) {
                                  rep(0, x)
                                })
             
             names(plants) <- paste('plant', 1:p_01ha, sep = '')
             
             
             for (k in 1:2) { # number of pollination days (blueberry days receptivity)
               message(paste('Starting day', k, 'of pollination'))
               
               for (j in seq_along(colmena)) { # bees on beehive 
                 
                 for (i in 1:colmena[j]){ # foraging trips per bee
                   
                   plant_i <- sample(1:length(plants), 1) # plant i
                   
                   flower_i <- sample(1:length(plants[[plant_i]]), 1) # flower j
                   
                   plants[[plant_i]][flower_i] <- plants[[plant_i]][flower_i] + 1 # visit to ij
                 }
               }
             }
             
             plants
             
           })
Sys.time() - t1

names(plants) <- paste('Hive', 1:length(plants), sep = '')


```

```{r}
#plants <- readRDS('1_hive_1HA.rds')
```

Let me show 4four replicates of the visits given one low-quality hive per ha:

```{r}
t <- 1

par(mfrow = c(2, 2))

repeat {
  
  if (t > 4) break
  
  plot(density(plants[[t]][[t]]), ylim = c(0, 5), xlim = c(-0.5, 6), 
       main = paste('Hive', t), xlab = 'Honeybee visits per flower\n (density: 1 hive per ha)')
  for (i in seq_along(plants$Hive1)) {
    lines(density(plants[[t]][[i]]), lwd = 0.01)
  }
  lines(density(unlist(lapply(plants[[t]], median))), col = 'red', lwd = 2)
  
  t <- t + 1
  
}
par(mfrow = c(1, 1))
```

**I must generalize the function above to increase the number of hives per ha, but this looks promising**


NEXT STEPS: I have to organize the models to predict the pollen deposition --> fruit size --> fruit weight --> 
and Yield





